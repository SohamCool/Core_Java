package Stream_Programs;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StreamExample {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("Java");
        list.add("is");
        list.add("a");
        list.add("Programming");
        list.add("language");
        list.add("language");

        // Intermediate Function
        // filter()
        System.out.println("\nFilter method");
        list.stream().filter(element -> element.contains("a")).forEach(element -> System.out.println(element+" "));

        // sorted()
        System.out.println("\nSorted list");
        list.stream().sorted().forEach(element -> System.out.print(element+" "));

        // distinct()
        System.out.println("\n\nDistinct method");
        list.stream().distinct().forEach(element -> System.out.print(element+" "));

        // map()
        System.out.println("\n\nmap() method");
        Stream stream = list.stream().map(str -> {
            if(str == "Java")
                return "Python";
            return str;
        });
        list = (List<String>)stream.collect(Collectors.toList());
        System.out.println(list);

        // flatMap() list inside list
        System.out.println("\nflatMap() method");
        List<List<Integer>> numbers = new ArrayList<>();
        numbers.add(Arrays.asList(1,2,3,4));
        numbers.add(Arrays.asList(11,12,13,14));
        numbers.add(Arrays.asList(21,22,23,24));
        System.out.print("List inside List: ");
        System.out.println(numbers);
        List<Integer> flatList = numbers.stream()
                .flatMap(o -> o.stream())
                .collect(Collectors.toList());
        System.out.println("List generated by flatMap() method: "+flatList);

        // peek() method
        System.out.println("\npeek method()");
        Stream.of("One", "Two", "Three", "Four", "Five", "Six")
                .filter(e -> e.length() > 3)
                .peek(e -> System.out.println("Filtered value: "+e))
                .map(String::toUpperCase)
                .peek(e -> System.out.println("Mapped value: "+e))
                .collect(Collectors.toList());

        // limit() method
        System.out.println("\nlimit method()");
        Stream.of("One", "Two", "Three", "Four", "Five", "Six")
                .limit(3)
                .forEach(item -> System.out.println(item));

        // skip() method
        System.out.println("\nskip method()");
        Stream.of("One", "Two", "Three", "Four", "Five", "Six")
                .skip(3)
                .forEach(item -> System.out.println(item));
    }
}
